"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assembler_1 = require("./assembler");
const core_1 = require("./core");
const nativeFunctionNames = new Map();
assembler_1.asm.const_str = function (str, encoding = "utf-8") {
    let ptr;
    if (typeof encoding === "number") {
        ptr = core_1.AllocatedPointer.fromString(str, encoding);
    }
    else {
        ptr = Buffer.from(str + "\0", encoding);
    }
    core_1.chakraUtil.JsAddRef(ptr);
    return ptr;
};
assembler_1.asm.getFunctionNameFromEntryAddress = function (address) {
    return nativeFunctionNames.get(address.getAddressBin()) || null;
};
assembler_1.asm.getFunctionName = function (address) {
    const info = core_1.runtimeError.lookUpFunctionEntry(address);
    if (info === null)
        return null;
    const rva = info[1];
    if (rva == null)
        return null;
    return nativeFunctionNames.get(info[0].add(rva).getAddressBin()) || null;
};
assembler_1.asm.setFunctionNames = function (base, labels) {
    for (const [name, address] of Object.entries(labels)) {
        nativeFunctionNames.set(base.add(address).getAddressBin(), name);
    }
};
const SIZE_OF_RF = 4 * 3;
let reportGenerating = false;
function report(size) {
    if (reportGenerating)
        return;
    reportGenerating = true;
    setTimeout(() => {
        reportGenerating = false;
        console.log(`[BDSX] Generated Machine Code: ${size} bytes`);
    }, 10).unref();
}
function hasZeroLabel(labels) {
    for (const address of Object.values(labels)) {
        if (address === 0) {
            return true;
        }
    }
    return false;
}
assembler_1.X64Assembler.prototype.alloc = function (name) {
    const buffer = this.buffer(true);
    const memsize = this.getDefAreaSize();
    const memalign = this.getDefAreaAlign();
    const totalsize = buffer.length + memsize;
    const mem = core_1.cgate.allocExecutableMemory(totalsize, memalign);
    mem.setBuffer(buffer);
    const table = this.getLabelOffset("#runtime_function_table");
    if (table !== -1) {
        const size = buffer.length - table;
        core_1.runtimeError.addFunctionTable(mem.add(table), (size / SIZE_OF_RF) | 0, mem);
    }
    const labels = this.labels(true);
    if (!hasZeroLabel(labels)) {
        if (name == null) {
            name = "#anonymous";
        }
        labels[name] = 0;
    }
    assembler_1.asm.setFunctionNames(mem, labels);
    report(totalsize);
    return mem;
};
assembler_1.X64Assembler.prototype.allocs = function () {
    const buffer = this.buffer(true);
    const memsize = this.getDefAreaSize();
    const memalign = this.getDefAreaAlign();
    const buffersize = buffer.length;
    const totalsize = buffersize + memsize;
    const mem = core_1.cgate.allocExecutableMemory(totalsize, memalign);
    mem.setBuffer(buffer);
    report(totalsize);
    const out = {};
    const labels = this.labels();
    for (const [name, offset] of Object.entries(labels)) {
        out[name] = mem.add(offset);
    }
    const defs = this.defs();
    for (const [name, def] of Object.entries(defs)) {
        out[name] = mem.add(def.offset + buffersize);
    }
    const table = labels["#runtime_function_table"];
    if (table != null) {
        const size = buffer.length - table;
        core_1.runtimeError.addFunctionTable(mem.add(table), (size / SIZE_OF_RF) | 0, mem);
        assembler_1.asm.setFunctionNames(mem, labels);
    }
    return out;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29kZWFsbG9jLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY29kZWFsbG9jLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsMkNBQWdEO0FBRWhELGlDQUFzSDtBQWV0SCxNQUFNLG1CQUFtQixHQUFHLElBQUksR0FBRyxFQUFrQixDQUFDO0FBRXRELGVBQUcsQ0FBQyxTQUFTLEdBQUcsVUFBVSxHQUFXLEVBQUUsV0FBc0MsT0FBTztJQUNoRixJQUFJLEdBQTJCLENBQUM7SUFDaEMsSUFBSSxPQUFPLFFBQVEsS0FBSyxRQUFRLEVBQUU7UUFDOUIsR0FBRyxHQUFHLHVCQUFnQixDQUFDLFVBQVUsQ0FBQyxHQUFHLEVBQUUsUUFBUSxDQUFDLENBQUM7S0FDcEQ7U0FBTTtRQUNILEdBQUcsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLEVBQUUsUUFBUSxDQUFDLENBQUM7S0FDM0M7SUFDRCxpQkFBVSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUN6QixPQUFPLEdBQUcsQ0FBQztBQUNmLENBQUMsQ0FBQztBQUNGLGVBQUcsQ0FBQywrQkFBK0IsR0FBRyxVQUFVLE9BQW9CO0lBQ2hFLE9BQU8sbUJBQW1CLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxhQUFhLEVBQUUsQ0FBQyxJQUFJLElBQUksQ0FBQztBQUNwRSxDQUFDLENBQUM7QUFDRixlQUFHLENBQUMsZUFBZSxHQUFHLFVBQVUsT0FBb0I7SUFDaEQsTUFBTSxJQUFJLEdBQUcsbUJBQVksQ0FBQyxtQkFBbUIsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUN2RCxJQUFJLElBQUksS0FBSyxJQUFJO1FBQUUsT0FBTyxJQUFJLENBQUM7SUFDL0IsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3BCLElBQUksR0FBRyxJQUFJLElBQUk7UUFBRSxPQUFPLElBQUksQ0FBQztJQUM3QixPQUFPLG1CQUFtQixDQUFDLEdBQUcsQ0FB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